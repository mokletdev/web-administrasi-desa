// TODO: Migrate all of this

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AdministrativeUnit {
  id                  String               @id @default(uuid())
  name                String
  administrativeLevel AdministrativeLevel
  parents             AdministrativeUnit[] @relation("ParentChild")
  children            AdministrativeUnit[] @relation("ParentChild")
  letterhead          String?              @db.LongText

  officials Official[]
  users     User[]
  services  AdministrativeService[]
}

model AdministrativeService {
  id       String @id @default(uuid())
  name     String
  skipStep Skip?

  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  templates            Template[]
  administrativeUnit   AdministrativeUnit @relation(fields: [administrativeUnitId], references: [id])
  administrativeUnitId String
  ServiceRequest       ServiceRequest[]
}

model ServiceRequest {
  id       String              @id @default(uuid())
  status   String
  name     String              @default("Surat")
  done     Boolean             @default(false)
  levelNow AdministrativeLevel @default(SUBDISTRICT)

  admnistrativeService    AdministrativeService? @relation(fields: [administrativeServiceId], references: [id])
  administrativeServiceId String?
  createdAt               DateTime               @default(now())

  user        User         @relation(fields: [userId], references: [id])
  userId      String
  submissions Submission[]
}

model Official {
  id   String @id @default(uuid())
  name String

  user                 User?               @relation(fields: [userId], references: [id])
  userId               String?             @unique
  unit                 AdministrativeUnit? @relation(fields: [administrativeUnitId], references: [id])
  administrativeUnitId String?
  signRequests         SignRequest[]
  Sign                 Sign[]
}

model Template {
  id         String              @id @default(uuid())
  title      String
  content    String              @db.LongText
  contentPdf String              @db.LongText
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  level      AdministrativeLevel

  signs                   Sign[]
  AdministrativeService   AdministrativeService @relation(fields: [administrativeServiceId], references: [id])
  administrativeServiceId String
  fields                  Field[]
  submissions             Submission[]
}

model Sign {
  id     String  @id @default(uuid())
  coordX Float // X Coordinate in pixels (measured from the left property of CSS)
  coordY Float // Y Coordinate in pixels (measured from the bottom property of CSS)
  size   Float
  page   Int     @default(1)
  image  String? @db.LongText // If it has 'image' property, then it is not a TTE

  Official   Official @relation(fields: [officialId], references: [id])
  officialId String

  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model SignRequest {
  id        String   @id @default(uuid())
  signedPdf String   @db.LongText
  signedAt  DateTime @default(now())

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  official     Official   @relation(fields: [officialId], references: [id])
  submissionId String     @db.Char(36)
  officialId   String
}

model FieldRelation {
  id          String    @id @default(uuid())
  targetTable String // Name of the related table
  targetField String // Field to use as value (e.g., id)
  field       FieldType @relation(fields: [fieldTypeId], references: [id], onDelete: Cascade)
  fieldTypeId Int       @unique

  @@index([fieldTypeId])
}

model FieldType {
  id          Int            @id @default(autoincrement())
  label       String         @unique
  placeholder String? // Placeholder text
  baseType    BaseFieldType // Basic type of the field
  relation    FieldRelation? // Optional relation configuration
  fields      Field[]
}

model Field {
  id          Int               @id @default(autoincrement()) @map("field_id")
  label       String?
  required    Boolean?          @default(true)
  template    Template          @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  options     FieldOption[] // For radio/checkbox options
  submissions SubmissionField[]
  fieldType   FieldType         @relation(fields: [fieldTypeId], references: [id])
  fieldNumber Int               @default(1)
  fieldTypeId Int

  @@index([templateId])
  @@index([fieldTypeId])
}

model FieldOption {
  id      String @id @default(uuid())
  value   String
  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId Int

  @@index([fieldId])
}

model Submission {
  id          String         @id @default(uuid()) @db.Char(36)
  status      TemplateStatus @default(PENDING_APPROVAL)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  signedPdf   String?        @db.LongText
  unsignedPdf String?        @db.LongText

  fields           SubmissionField[]
  approvals        Approval[]
  signRequests     SignRequest[]
  serviceRequest   ServiceRequest?   @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?
  template         Template          @relation(fields: [templateId], references: [id])
  templateId       String

  @@index([templateId])
}

model SubmissionField {
  id    String @id @default(uuid()) @db.Char(36)
  value String @db.LongText

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String
  field        Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId      Int

  @@index([submissionId, fieldId])
}

model Approval {
  id             String         @id @default(uuid())
  status         ApprovalStatus @default(PENDING)
  approvedAt     DateTime       @default(now())
  registerNumber String?

  approvedBy   User?       @relation(fields: [approvedById], references: [id])
  approvedById String?
  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?

  @@index([submissionId])
}

model User {
  id                    String                  @id @default(uuid())
  username              String                  @unique
  email                 String                  @unique
  NIK                   String?                 @unique
  name                  String
  password              String
  role                  UserRole
  approvals             Approval[]
  submissions           Submission[]
  official              Official?
  unit                  AdministrativeUnit?     @relation(fields: [administrativeUnitId], references: [id])
  administrativeUnitId  String?
  ServiceRequest        ServiceRequest[]
  AdministrativeService AdministrativeService[]
}

enum TemplateStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  READY_FOR_SIGNATURE
  SIGNED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  CITIZEN
  CITY_ADMIN
  DISTRICT_ADMIN
  SUBDISTRICT_ADMIN
  SUPERADMIN
  OFFICIAL
}

enum AdministrativeLevel {
  CITY
  DISTRICT
  SUBDISTRICT
}

enum BaseFieldType {
  text
  number
  email
  password
  longtext
  radio
  checkbox
  relation // type for database relations
  date
  datetime
  time
  file
  phone
}

enum Skip {
  SUBDISTRICT
  DISTRICT
  SUBDISTRICT_DISTRICT
}
